# docker-compose.yml
version: '3.8' # Specify the Docker Compose file format version

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine # Use a lightweight PostgreSQL image (version 15)
    container_name: budget_tracker_db # Assign a custom name to the container
    environment:
      # These are standard PostgreSQL environment variables for initial setup
      POSTGRES_DB: transactiondb # Sets the default database name
      POSTGRES_USER: postgres # Sets the default database user
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD} # Reads password from the .env file for security
    ports:
      - "5432:5432" # Map container port 5432 to host port 5432 (optional, for local tools like pgAdmin)
    volumes:
      - db_data:/var/lib/postgresql/data # Mount a named volume for persistent database data
      - ./transaction-service/src/main/resources/schema.sql:/docker-entrypoint-initdb.d/init.sql 
    healthcheck: # Define a health check for the database service
      test: ["CMD-SHELL", "pg_isready -U postgres -d transactiondb"] # Command to check if DB is ready
      interval: 5s # Check every 5 seconds
      timeout: 5s # Timeout after 5 seconds
      retries: 5 # Retry 5 times before marking as unhealthy
    networks:
      - app_network # Connect this service to the custom 'app_network'

  # Spring Boot Transaction Service
  transaction-service:
    build:
      context: ./transaction-service # Specify the build context (path to your transaction-service directory)
      dockerfile: Dockerfile # Specify the Dockerfile within the context
    container_name: transaction-service # Assign a custom name to the container
    ports:
      - "8080:8080" # Map container port 8080 to host port 8080
    environment:
      # These environment variables are passed to your Spring Boot application
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE} # Reads from the .env file (should be 'prod' for consistency)
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/transactiondb # Use the Docker internal service name 'db' for communication
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME} # Reads from the .env file
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD} # Reads from the .env file
      APP_CORS_ALLOWED_ORIGINS: "http://localhost:5173,https://budget-tracker-app-ericpham.vercel.app" #
    depends_on:
      db:
        condition: service_healthy # Ensure 'db' service is healthy before starting this service
    networks:
      - app_network # Connect this service to the custom 'app_network'

  # Spring Boot Report Service
  report-service:
    build:
      context: ./report-service # Specify the build context (path to your report-service directory)
      dockerfile: Dockerfile # Specify the Dockerfile within the context
    container_name: report-service # Assign a custom name to the container
    ports:
      - "8081:8081" # Map container port 8081 to host port 8081
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE} # Reads from the .env file (should be 'prod' for consistency)
      TRANSACTION_SERVICE_URL: http://transaction-service:8080 # Use the Docker internal service name 'transaction-service' for communication
      APP_CORS_ALLOWED_ORIGINS: "http://localhost:5173,https://budget-tracker-app-ericpham.vercel.app" 
    depends_on: # Define service dependencies
      transaction-service:
        condition: service_started # Ensure 'transaction-service' is started before this service
    networks:
      - app_network # Connect this service to the custom 'app_network'

  # React Frontend Service
  transaction-frontend:
    build:
      context: ./transaction-frontend # Path to your transaction-frontend directory
      dockerfile: Dockerfile # Specify the Dockerfile within the context
    container_name: budget-tracker-frontend # Assign a custom name to the container
    ports:
      - "5173:80" # Map container port 5173 to host port 5173 (assuming your frontend serves on 5173)
    environment:
      # These variables are for the client-side JavaScript, which runs in the browser.
      # They point to the backend services exposed on the host machine via mapped ports.
      VITE_TRANSACTION_SERVICE_API_URL: http://localhost:8080
      VITE_REPORT_SERVICE_API_URL: http://localhost:8081
    depends_on: # Define service dependencies
      - transaction-service # Frontend depends on backend microservices being up
      - report-service
    networks:
      - app_network # Connect this service to the custom 'app_network'

volumes:
  db_data: # Declares the named volume for PostgreSQL data persistence

networks:
  app_network: # Defines a custom bridge network for all services to communicate with each other
    driver: bridge # Specifies the network driver (default is 'bridge')